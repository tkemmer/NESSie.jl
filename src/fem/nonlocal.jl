#=
    Returns the gradients of the linear basis functions for the
    given tetrahedron.

    Note that the results are premultiplied by the determinant!

    @param elem
        A tetrahedron
    @return (determinant, [part. derivatives])
=#
function basisfunctions{T}(elem::Tetrahedron{T})
    # map onto reference tetrahedron
    # x = AŒ± + b ‚áî Œ± = A^(-1)‚ãÖ(x-b)
    a  = [elem.v2 - elem.v1 elem.v3 - elem.v1 elem.v4 - elem.v1]
    a·µ¢ = [(a[:,2] √ó a[:,3])'; (a[:,3] √ó a[:,1])'; (a[:,1] √ó a[:,2])'] # /det(a) # TODO devectorize
    b·µ¢ = a·µ¢ * elem.v1
    d = det(a)
    #d = a[:,1] ‚ãÖ (a[:,2] √ó a[:,3]) # TODO check! (this is different to det(a))

    if(d < 0)
        println(d)
    end

    @assert d != 0

    # compute base functions
    #f = Function[x::Vector{T} -> a·µ¢[i,:] ‚ãÖ x - b·µ¢[i] for i in 1:3]
    #insert!(f, 1, x::Vector{T} -> d - f[1](x) - f[2](x) - f[3](x))

    # compute partial derivatives
    ‚àáf = Vector{T}[a·µ¢[i,:] for i in 1:3]
    insert!(‚àáf, 1, -‚àáf[1] - ‚àáf[2] - ‚àáf[3])

    (d, ‚àáf)
end

#=
    TODO
=#
function reverseprojection{T}(elem::Tetrahedron{T})
    Œ± -> [elem.v2 - elem.v1 elem.v3 - elem.v1 elem.v4 - elem.v1] * Œ± + elem.v1 # TODO devectorize
end

#=
    Returns the (local) stiffness matrix for the gradients of the
    linear basis functions of a single tetrahedron. The matrix does
    only represent the nodes present in the given element (all other
    entries would be zero anyway).

    ‚à´ùõÅf·µ¢‚ãÖùõÅf‚±ºdx (for all nodes i, j of the element)
    = ùõÅf·µ¢‚ãÖùõÅf‚±º‚à´dx (since our base functions are linear)
    = ùõÅf·µ¢‚ãÖùõÅf‚±º‚ãÖ|det(A)|/6 (since our elements are tetrahedra)

    Note that the stiffness matrix is premultiplied by the absolute
    value of the determinant!

    @param ‚àáf
        Basis function gradients of the tetrahedron nodes v1 to v4
    @return Symmetric{T, Array{T,2}}
=#
# TODO devectorize, deduplicate (v is symmetric!)
localstiffnessmatrix_k{T}(ùõÅf::Vector{T}) = Symmetric(6 \ [ùõÅf[row]‚ãÖùõÅf[col] for row in 1:length(ùõÅf), col in 1:length(ùõÅf)], :U)

#=
    TODO
=#
function stiffnessmatrix{T}(elements::Vector{Tetrahedron{T}}, revidx::Dict{UInt,UInt}, f::Function, domain::Symbol=:all)
    m = spzeros(T, length(revidx), length(revidx))
    for elem in elements
        # only process elements of the given domain (if domain != :all)
        domain != :all && elem.domain != domain && continue

        mlocal = f(elem)
        idx    = [revidx[object_id(e)] for e in (elem.v1, elem.v2, elem.v3, elem.v4)] # TODO pre-allocate

        # TODO m is symmetric!
        @inbounds for row in 1:4, col in 1:4
            m[idx[row], idx[col]] += mlocal[row,col]
        end
    end
    m
end
stiffnessmatrix_k{T}(elements::Vector{Tetrahedron{T}}, revidx::Dict{UInt,UInt}, domain::Symbol=:all) = stiffnessmatrix(elements, revidx, elem -> localstiffnessmatrix_k(elem), domain) # TODO
stiffnessmatrix_v{T}(elements::Vector{Tetrahedron{T}}, revidx::Dict{UInt,UInt}, domain::Symbol=:all) = stiffnessmatrix(elements, revidx, elem -> [2 1 1 1; 1 2 1 1; 1 1 2 1; 1 1 1 2], domain) # TODO

function localstiffnessmatrix_k{T}(elem::Tetrahedron{T})
    d, ‚àáf = basisfunctions(elem)
    #println(abs(d) \ Symmetric(6 \ [‚àáf[row]‚ãÖ‚àáf[col] for row in 1:length(‚àáf), col in 1:length(‚àáf)], :U))

    len = length(‚àáf)
    res = Array{T}(len, len)
    @inbounds for row in 1:len
        for col in row:len
            res[row, col] = ‚àáf[row]‚ãÖ‚àáf[col]
        end
    end
    scale!(res, 1 / (abs(d) * 6)) # FIXME pure evil!

    #=
    @inbounds for row in 1:len
        for col in row:len
            if(abs(res[row, col]) < 1e-10)
                res[row, col] = zero(T)
            end
        end
    end
    =#
    if(sum(res) > 100)
        println(res)
    end


    Symmetric(res, :U)
end

#=
    TODO
=#
function quadrature_œÅ{T}(elem::Tetrahedron{T}, rproj::Function, charges::Vector{Charge{T}})
    qpts = quadraturepoints(Tetrahedron, T)
    # basis functions evaluated at cubature point
    const bt = Vector{T}[[.25, 1/6, .5, 1/6, 1/6], qpts.x, qpts.y, qpts.z]

    œÅlocal = zeros(T, 4)
    q      = œÜmol(Vector{T}[rproj([qpts.x[i], qpts.y[i], qpts.z[i]]) for i in 1:qpts.num], charges)
    for node in 1:4, cpt in 1:qpts.num
        œÅlocal[node] += qpts.weight[cpt] * bt[node][cpt] * q[cpt]
    end
    œÅlocal
end

#=
    TODO
=#
function rhs_œÅ{T}(elements::Vector{Tetrahedron{T}}, charges::Vector{Charge{T}}, revidx::Dict{UInt,UInt}, domain::Symbol=:all)
    œÅ = zeros(T, length(revidx))

    for elem in elements
        # only process elements of the given domain (if domain != :all)
        domain != :all && elem.domain != domain && continue

        rproj  = reverseprojection(elem)
        œÅlocal = quadrature_œÅ(elem, rproj, charges)
        idx    = [revidx[object_id(e)] for e in (elem.v1, elem.v2, elem.v3, elem.v4)]

        @inbounds for row in 1:4
            œÅ[idx[row]] += œÅlocal[row]
        end
    end
    œÅ
end

#=
    TODO
    merge with quadrature_œÅ
=#
function quadrature_Œ≥{T}(elem::Tetrahedron{T}, rproj::Function, ‚àáf::Vector{Vector{T}}, charges::Vector{Charge{T}})
    qpts   = quadraturepoints(Tetrahedron, T)
    Œ≥local = zeros(T, 4)
    q      = ‚àáœÜmol(Vector{T}[rproj([qpts.x[i], qpts.y[i], qpts.z[i]]) for i in 1:qpts.num], charges)
    for node in 1:4, cpt in 1:qpts.num
        Œ≥local[node] += qpts.weight[cpt] * (‚àáf[node] ‚ãÖ q[cpt])
    end
    Œ≥local
end

#=
    TODO merge with rhs_œÅ
=#
function rhs_Œ≥{T}(elements::Vector{Tetrahedron{T}}, charges::Vector{Charge{T}}, revidx::Dict{UInt,UInt}, domain::Symbol=:all)
    Œ≥ = zeros(T, length(revidx))

    for elem in elements
        # only process elements of the given domain (if domain != :all)
        domain != :all && elem.domain != domain && continue

        rproj  = reverseprojection(elem)
        d, ‚àáf  = basisfunctions(elem)
        Œ≥local = d \ quadrature_Œ≥(elem, rproj, ‚àáf, charges) # FIXME pure evil
        idx    = [revidx[object_id(e)] for e in (elem.v1, elem.v2, elem.v3, elem.v4)]

        @inbounds for row in 1:4
            Œ≥[idx[row]] += Œ≥local[row]
        end
    end
    Œ≥
end

#=
    TODO
=#
function espotential{T}(nodes::Vector{Vector{T}}, elements::Vector{Tetrahedron{T}}, charges::Vector{Charge{T}}, opt::Option{T}=defaultopt(T))
    # TODO reuse memory
    revidx = reverseindex(nodes)
    numnodes = length(nodes)
    v  = stiffnessmatrix_v(elements, revidx) / 120 # TODO
    kŒ© = stiffnessmatrix_k(elements, revidx, :Œ©)
    kŒ£ = stiffnessmatrix_k(elements, revidx, :Œ£)

    @assert size(kŒ£) == (numnodes, numnodes)


    œÅ = rhs_œÅ(elements, charges, revidx)

    #=
        1. Compute u‚ÇÄ
    =#
    println("Step 1: Solving for u0...")

    # stiffness matrix M‚ÇÄ
    m0 = spzeros(T, numnodes, numnodes)

    # m0 = Œª¬≤ * K + V
    copy!(m0, kŒ©)
    axpy!(1, kŒ£, m0)
    scale!(m0, opt.Œª^2)
    axpy!(1, v, m0)

    u0 = m0 \ œÅ
    @assert isa(u0, Vector{T})
    @assert length(u0) == numnodes

    #=
        2. Assemble system matrix M
    =#
    println("Step 2: Assembling system matrix M...")
    m = spzeros(T, 2 * numnodes, 2 * numnodes)

    # convenient access to the matrix blocks
    m11 = view(m, 1:numnodes,                    1: numnodes)
    m12 = view(m, 1:numnodes,           1+numnodes:2numnodes)
    m21 = view(m, 1+numnodes:2numnodes,          1: numnodes)
    m22 = view(m, 1+numnodes:2numnodes, 1+numnodes:2numnodes)

    # m11 = Œµ‚àû * KŒ£ + ŒµŒ© * KŒ©
    axpy!(opt.Œµ‚àû, kŒ£, m11)
    axpy!(opt.ŒµŒ©, kŒ©, m11)

    # m12 = (ŒµŒ£ - Œµ‚àû)KŒ£
    axpy!(opt.ŒµŒ£ - opt.Œµ‚àû, kŒ£, m12)

    # m21 = -V
    axpy!(-1, v, m21)

    # m22 = Œª¬≤ * K + V = M‚ÇÄ
    copy!(m22, m0)

    #=
        3. Compute (Œ®,u‚ÇÅ)
    =#
    println("Step 3: Solving for Œ®...")
    rhs = zeros(T, 2 * numnodes)
    Œ≤   = view(rhs, 1:numnodes)
    Œ≥Œ£  = rhs_Œ≥(elements, charges, revidx, :Œ£) # TODO

    # Œ≤ = (Œµ‚àû - ŒµŒ£) * (KŒ£ * u‚ÇÄ) + (ŒµŒ© - Œµ‚àû) * Œ≥Œ£
    #gemv!(opt.Œµ‚àû - opt.ŒµŒ£, vŒ£, u0, Œ≤) # BLAS does not support sparse matrices :\
    axpy!(opt.Œµ‚àû - opt.ŒµŒ£, kŒ£ * u0, Œ≤) # TODO in-place solution
    axpy!(opt.ŒµŒ© - opt.Œµ‚àû, Œ≥Œ£, Œ≤)

    Œ®u1 = m \ rhs

    #=
        4. Compute (Œ¶*,u‚ÇÇ)
        TODO check if this can be ignored as long as we don't have ions in the solvent
    =#
    println("Step 4: Solving for Œ¶...")
    Œ¶u2 = m \ zeros(T, 2 * numnodes)

    println("Step 5: Aggregating results...")
    ec / (4œÄ * Œµ0 * opt.ŒµŒ©) * (view(Œ®u1, 1:numnodes) + œÜmol(nodes, charges))
end
