var documenterSearchIndex = {"docs":
[{"location":"intern/testmodel/#NESSie.TestModel","page":"NESSie.TestModel","title":"NESSie.TestModel","text":"","category":"section"},{"location":"intern/testmodel/","page":"NESSie.TestModel","title":"NESSie.TestModel","text":"    CurrentModule = NESSie.TestModel","category":"page"},{"location":"intern/testmodel/#int-util-testmodel","page":"NESSie.TestModel","title":"Utility functions","text":"","category":"section"},{"location":"intern/testmodel/","page":"NESSie.TestModel","title":"NESSie.TestModel","text":"    coefficients\n    legendre\n    scalemodel\n    spherical_besseli\n    spherical_besselk","category":"page"},{"location":"intern/testmodel/#NESSie.TestModel.coefficients","page":"NESSie.TestModel","title":"NESSie.TestModel.coefficients","text":"function coefficients{T}(\n    model::XieModel{T},\n    len  ::Int\n)\n\nComputes the coefficients A_in with i=1 2 3 for the given XieModel and the desired number of terms.\n\nReturn type\n\nTuple{     Array{T, 2},     Array{T, 2},     Array{T, 2} }\n\n\n\n\n\n","category":"function"},{"location":"intern/testmodel/#NESSie.TestModel.legendre","page":"NESSie.TestModel","title":"NESSie.TestModel.legendre","text":"legendre{T <: AbstractFloat}(\n    maxn::Int,\n    x   ::T\n)\n\nPrecomputes the Legendre polynomials Pₙ(x) for n = 0 1  textttmaxn-1 and returns a generic function to access the values.\n\nReturn type\n\n(generic function)\n\n(n::Int) -> Pₙ(x)   # return type: T\n\nExample\n\njulia> p = legendre(3, 0.5);\n\njulia> [p(n) for n in 0:2]    # [P₀(0.5), P₁(0.5), P₂(0.5)]\n3-element Vector{Float64}:\n  1.0\n  0.5\n -0.125\n\n\n\n\n\n","category":"function"},{"location":"intern/testmodel/#NESSie.TestModel.scalemodel","page":"NESSie.TestModel","title":"NESSie.TestModel.scalemodel","text":"function scalemodel{T}(\n    charges::Vector{Charge{T}},\n    radius ::T;\n    # kwargs\n    compat ::Bool              = false\n)\n\nTranslates and rescales the given point charge model to fit inside an origin-centered sphere with the specified radius. More specifically, the function will center the given model at the origin and scaled in a way such that the outermost point charge will be located at 80% radius distance from the origin.\n\nArguments\n\ncompat Enables compatibility mode and scales the model exactly like the reference implementation ([Xie16]). Use this flag if you intend to compare the results to the reference.\n\nReturn type\n\nVector{Charge{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/testmodel/#NESSie.TestModel.spherical_besseli","page":"NESSie.TestModel","title":"NESSie.TestModel.spherical_besseli","text":"spherical_besseli{T <: AbstractFloat}(\n    maxn::Int,\n    r   ::T\n)\n\nPrecomputes the modified spherical Bessel function of the first kind iₙ(r) for n=-1 0  textttmaxn and returns a generic function to access the values. iₙ(r) is defined as\n\niₙ(r) = sqrtfracπ2r I_n+05(r)\n\nwhere I_ν is the modified Bessel function of the first kind [Xie16].\n\nReturn type\n\n(generic function)\n\n(n::Int) -> iₙ(r)   # return type: T\n\n\n\n\n\n","category":"function"},{"location":"intern/testmodel/#NESSie.TestModel.spherical_besselk","page":"NESSie.TestModel","title":"NESSie.TestModel.spherical_besselk","text":"spherical_besselk{T <: AbstractFloat}(\n    maxn::Int,\n    r   ::T\n)\n\nPrecomputes the modified spherical Bessel function of the second kind kₙ(r) for n=-1 0  textttmaxn and returns a generic function to access the values. kₙ(r) is defined as\n\nkₙ(r) = sqrtfracπ2r K_n+05(r)\n\nwhere K_ν is the modified Bessel function of the second kind [Xie16].\n\nReturn type\n\n(generic function)\n\n(n::Int) -> kₙ(r)   # return type: T\n\n\n\n\n\n","category":"function"},{"location":"lib/util/#Utility-functions","page":"Utility functions","title":"Utility functions","text":"","category":"section"},{"location":"lib/util/","page":"Utility functions","title":"Utility functions","text":"    meshunion\n    obspoints_line\n    obspoints_plane","category":"page"},{"location":"lib/util/#NESSie.meshunion","page":"Utility functions","title":"NESSie.meshunion","text":"meshunion{T}(\n    model1::Model{T, Tetrahedron{T}},\n    model2::Model{T, Tetrahedron{T}}\n)\n\nMerges two volume models, e.g., the models of a protein and the solvent. Duplicate nodes (e.g., the nodes on the protein surface) are merged into a single node, duplicate elements and charges (if any) are retained as well as the system constants of the first model.\n\nReturn type\n\nModel{T, Tetrahedron{T}}\n\nnote: Note\nThis function assumes that there are no duplicates within either of the node lists!\n\n\n\n\n\n","category":"function"},{"location":"lib/util/#NESSie.obspoints_line","page":"Utility functions","title":"NESSie.obspoints_line","text":"obspoints_line{T}(\n    u::Vector{T},\n    v::Vector{T},\n    n::Int\n)\n\nGenerates n evenly distributed observation points along the line segment from u to v.\n\nReturn type\n\nGenerator -> Vector{T}\n\nExample\n\nfor ξ in obspoints_line([0, 0, 0], [1, 1, 1], 10)\n    ...\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/util/#NESSie.obspoints_plane","page":"Utility functions","title":"NESSie.obspoints_plane","text":"obspoints_plane{T}(\n    a  ::Vector{T},\n    b  ::Vector{T},\n    c  ::Vector{T},\n    nba::Int,\n    nbc::Int\n)\n\nGenerates nba ⋅ nbc evenly distributed observation points on the parallelogram with the sides overlineBA and overlineBC and a, b, c being the location vectors to the points A, B, and C, respectively.\n\nArguments\n\nnba   Number of observation points along overlineBA\nnbc   Number of observation points along overlineBC\n\nReturn type\n\nGenerator -> Vector{T}\n\nExample\n\nfor Ξ in obspoints_plane(...)\n    for ξ in Ξ\n        ...\n    end\nend\n\n\n\n\n\n","category":"function"},{"location":"lib/constants/#Constants","page":"Constants","title":"Constants","text":"","category":"section"},{"location":"lib/constants/#Global-constants","page":"Constants","title":"Global constants","text":"","category":"section"},{"location":"lib/constants/","page":"Constants","title":"Constants","text":"    ε0","category":"page"},{"location":"lib/constants/#NESSie.ε0","page":"Constants","title":"NESSie.ε0","text":"Vacuum permittivity\n\nUnit\n\nfracFm\n\n\n\n\n\n","category":"constant"},{"location":"lib/constants/#System-constants","page":"Constants","title":"System constants","text":"","category":"section"},{"location":"lib/constants/","page":"Constants","title":"Constants","text":"    Option\n    defaultopt","category":"page"},{"location":"lib/constants/#NESSie.Option","page":"Constants","title":"NESSie.Option","text":"struct Option{T <: AbstractFloat}\n    εΩ::T       # dielectric constant of the solute\n    εΣ::T       # dielectric constant of the solvent\n    ε∞::T       # large-scale (bulk) solvent response\n    λ ::T       # correlation length scale [λ] = Å\nend\n\nSystem parameters\n\n\n\n\n\n","category":"type"},{"location":"lib/constants/#NESSie.defaultopt","page":"Constants","title":"NESSie.defaultopt","text":"defaultopt(T::Type{Float64} = Float64)\ndefaultopt(T::Type{Float32})\n\nDefault system parameters\n\nReturn type\n\nOption{T}\n\nDefault values\n\nε_Ω = 2\nε_Σ = 78\nε_ = 18\nλ = 20 Å\n\n\n\n\n\n","category":"function"},{"location":"lib/quadrature/#Quadrature","page":"Quadrature","title":"Quadrature","text":"","category":"section"},{"location":"lib/quadrature/#Quadrature-points","page":"Quadrature","title":"Quadrature points","text":"","category":"section"},{"location":"lib/quadrature/","page":"Quadrature","title":"Quadrature","text":"    QuadraturePoints\n    QuadPts2D\n    QuadPts3D","category":"page"},{"location":"lib/quadrature/#NESSie.QuadraturePoints","page":"Quadrature","title":"NESSie.QuadraturePoints","text":"abstract type QuadraturePoints{T <: AbstractFloat} end\n\nAbstract base type for all sets of quadrature points\n\n\n\n\n\n","category":"type"},{"location":"lib/quadrature/#NESSie.QuadPts2D","page":"Quadrature","title":"NESSie.QuadPts2D","text":"struct QuadPts2D{T} <: QuadraturePoints{T}\n    num   ::Int         # number of points\n    x     ::Vector{T}   # x values\n    y     ::Vector{T}   # y values\n    weight::Vector{T}   # weights\nend\n\nQuadrature points and weights for triangles\n\n\n\n\n\n","category":"type"},{"location":"lib/quadrature/#NESSie.QuadPts3D","page":"Quadrature","title":"NESSie.QuadPts3D","text":"struct QuadPts3D{T} <: QuadraturePoints{T}\n    num   ::Int         # number of points\n    x     ::Vector{T}   # x values\n    y     ::Vector{T}   # y values\n    z     ::Vector{T}   # z values\n    weight::Vector{T}   # weights\nend\n\nQuadrature points and weights for tetrahedra\n\n\n\n\n\n","category":"type"},{"location":"lib/quadrature/#Generators","page":"Quadrature","title":"Generators","text":"","category":"section"},{"location":"lib/quadrature/","page":"Quadrature","title":"Quadrature","text":"    quadraturepoints","category":"page"},{"location":"lib/quadrature/#NESSie.quadraturepoints","page":"Quadrature","title":"NESSie.quadraturepoints","text":"quadraturepoints(::Type{Tetrahedron{Float64}})\nquadraturepoints(::Type{Tetrahedron{Float32}})\nquadraturepoints(::Type{Triangle{Float64}})\nquadraturepoints(::Type{Triangle{Float32}})\n\nGenerator function for quadrature points:\n\nTriangles: 7 points per element [Rad48]\nTetrahedra: 5 points per element [Kea86]\n\nReturn type\n\nQuadPts2D or QuadPts3D\n\n\n\n\n\n","category":"function"},{"location":"lib/quadrature/#Laplace-potential","page":"Quadrature","title":"Laplace potential","text":"","category":"section"},{"location":"lib/quadrature/","page":"Quadrature","title":"Quadrature","text":"    NESSie.Rjasanow.laplacecoll\n    NESSie.Rjasanow.laplacecoll!","category":"page"},{"location":"lib/quadrature/#NESSie.Rjasanow.laplacecoll","page":"Quadrature","title":"NESSie.Rjasanow.laplacecoll","text":"laplacecoll{T, P <: PotentialType}(\n    ptype::Type{P},\n    ξ    ::Vector{T},\n    elem ::Vector{Triangle{T}}\n)\n\nAnalytical solution for the single or double layer Laplace potential for a given triangle and observation point ξ [Rja90].\n\nnote: Note\nThe result is premultiplied by 4π.\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"lib/quadrature/#NESSie.Rjasanow.laplacecoll!","page":"Quadrature","title":"NESSie.Rjasanow.laplacecoll!","text":"laplacecoll!{T, P <: PotentialType}(\n    ptype   ::Type{P},\n    dest    ::DenseArray{T,1},\n    elements::Vector{Triangle{T}},\n    Ξ       ::Vector{Vector{T}},\n    fvals   ::Union{DenseArray{T,1},SubArray{T,1}}\n)\n\nlaplacecoll!{T, P <: PotentialType}(\n    ptype   ::Type{P},\n    dest    ::DenseArray{T, 2},\n    elements::Vector{Triangle{T}},\n    Ξ       ::Vector{Vector{T}}\n)\n\nAnalytical solution for the single or double layer Laplace potential for a given list of triangles and observation points Ξ [Rja90].\n\nThe first version of this function uses a vector as destination dest, where each element represents the dot product of the corresponding coefficient matrix row and the fvals vector.\n\nnote: Note\nThe result is premultiplied by 4π.\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"lib/quadrature/#Yukawa-potential","page":"Quadrature","title":"Yukawa potential","text":"","category":"section"},{"location":"lib/quadrature/","page":"Quadrature","title":"Quadrature","text":"    NESSie.Radon.regularyukawacoll\n    NESSie.Radon.regularyukawacoll!","category":"page"},{"location":"lib/quadrature/#NESSie.Radon.regularyukawacoll","page":"Quadrature","title":"NESSie.Radon.regularyukawacoll","text":"regularyukawacoll{T, P <: PotentialType}(\n          ::Type{P},\n    ξ     ::Vector{T},\n    elem  ::Triangle{T},\n    yukawa::T\n)\n\nComputes the regular part of the single or double layer Yukawa potential (that is, Yukawa minus Laplace) using a seven-point Radon cubature [Rad48] for a given triangle and observation point ξ.\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"lib/quadrature/#NESSie.Radon.regularyukawacoll!","page":"Quadrature","title":"NESSie.Radon.regularyukawacoll!","text":"regularyukawacoll!{T, P <: PotentialType}(\n            ::Type{P},\n    dest    ::DenseArray{T,1},\n    elements::Vector{Triangle{T}},\n    Ξ       ::Vector{Vector{T}},\n    yukawa  ::T,\n    fvals   ::Union{DenseArray{T,1},SubArray{T,1}}\n)\n\nregularyukawacoll!{T, P <: PotentialType}(\n            ::Type{P},\n    dest    ::DenseArray{T,2},\n    elements::Vector{Triangle{T}},\n    Ξ       ::Vector{Vector{T}},\n    yukawa  ::T\n)\n\nComputes the regular part of the single or double layer Yukawa potential (that is, Yukawa minus Laplace) using a seven-point Radon cubature [Rad48] for a given list of triangles and observation points Ξ.\n\nThe first version of this function uses a vector as destination dest, where each element represents the dot product of the corresponding coefficient matrix row and the fvals vector.\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"lib/models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"lib/models/#Elements","page":"Models","title":"Elements","text":"","category":"section"},{"location":"lib/models/","page":"Models","title":"Models","text":"    Element\n    Triangle\n    Tetrahedron","category":"page"},{"location":"lib/models/#NESSie.Element","page":"Models","title":"NESSie.Element","text":"abstract type Element{T <: AbstractFloat} end\nabstract type SurfaceElement{T} <: Element{T} end\nabstract type VolumeElement{T}  <: Element{T} end\n\nAbstract base types for all elements.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#NESSie.Triangle","page":"Models","title":"NESSie.Triangle","text":"struct Triangle{T} <: SurfaceElement{T}\n    v1      ::Vector{T}   # position of the first node\n    v2      ::Vector{T}   # position of the second node\n    v3      ::Vector{T}   # position of the third node\n    center  ::Vector{T}   # centroid of the triangle\n    normal  ::Vector{T}   # normal vector of the triangle\n    area    ::T           # area of the triangle\n    distorig::T           # distance to the origin\nend\n\nRepresentation of a single surface triangle.\n\nSpecial constructors\n\nTriangle{T}(\n    v1  ::Vector{T},\n    v2  ::Vector{T},\n    v3  ::Vector{T}\n)\n\nMost commonly used constructor variant for creating a triangle by only specifying its nodes. The remaining member variables will automatically be computed via props.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#NESSie.Tetrahedron","page":"Models","title":"NESSie.Tetrahedron","text":"struct Tetrahedron{T} <: VolumeElement{T}\n    v1::Vector{T}       # position of the first node\n    v2::Vector{T}       # position of the second node\n    v3::Vector{T}       # position of the third node\n    v4::Vector{T}       # position of the fourth node\n    domain::Symbol      # element domain (solvent :Σ, solute :Ω, or :none)\nend\n\nRepresentation of a single tetrahedron.\n\nSpecial constructors\n\nTetrahedron{T}(\n    v1::Vector{T},\n    v2::Vector{T},\n    v3::Vector{T},\n    v4::Vector{T}\n)\n\nSets domain to :none.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#Charge-models","page":"Models","title":"Charge models","text":"","category":"section"},{"location":"lib/models/","page":"Models","title":"Models","text":"    Charge","category":"page"},{"location":"lib/models/#NESSie.Charge","page":"Models","title":"NESSie.Charge","text":"struct Charge{T <: AbstractFloat}\n    pos::Vector{T}  # position of the charge\n    val::T          # charge value\nend\n\nRepresentation of a single point charge.\n\nSpecial constructors\n\nCharge{T}(\n    posx::T,\n    posy::T,\n    posz::T,\n    val ::T\n)\n\nConstructor variant with flat argument list for pos.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#System-models","page":"Models","title":"System models","text":"","category":"section"},{"location":"lib/models/","page":"Models","title":"Models","text":"    Model","category":"page"},{"location":"lib/models/#NESSie.Model","page":"Models","title":"NESSie.Model","text":"mutable struct Model{T, E <: Element{T}}\n    nodes   ::Vector{Vector{T}  = Vector{T}[]    # mesh nodes\n    elements::Vector{E}         = E[]            # mesh elements\n    charges ::Vector{Charge{T}} = Charge{T}[]    # point charges in the molecule\n    params  ::Option{T}         = defaultopt(T)  # system constants\nend\n\nSystem model representing a biomelecule in solvation, including a collection of point charges in the molecule and a set of system constants. The system can either be represented as a surface model (e.g., a collection of molecule surface triangles) or as a volume model (e.g., a collection of tetrahedra for the molecule and its surrounding space).\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#Test-models","page":"Models","title":"Test models","text":"","category":"section"},{"location":"lib/models/","page":"Models","title":"Models","text":"    CurrentModule = NESSie.TestModel","category":"page"},{"location":"lib/models/","page":"Models","title":"Models","text":"    BornIon\n    bornion\n    XieModel\n    NonlocalXieModel1","category":"page"},{"location":"lib/models/#NESSie.TestModel.BornIon","page":"Models","title":"NESSie.TestModel.BornIon","text":"struct BornIon{T <: AbstractFloat}\n    charge::Charge{T}  # point charge at the sphere's center\n    radius::T          # sphere radius in Å\nend\n\nSingle Born ion, that is, a monoatomic ion represented as a spherically symmetric domain with a single point charge located at its center (ε_Ω = 1).\n\nSpecial constructors\n\nBornIon{T}(charge::T, radius::T)\n\nCenters the sphere at (0 0 0)^T.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#NESSie.TestModel.bornion","page":"Models","title":"NESSie.TestModel.bornion","text":"bornion(name::String, ::Type{Float64} = Float64)\nbornion(name::String, ::Type{Float32})\n\nGenerator function for built-in Born ions:\n\nName Charge Radius [Åqv90]\nLi +1 0.645\nNa +1 1.005\nK +1 1.365\nRb +1 1.505\nCs +1 1.715\nMg +2 0.615\nCa +2 1.015\nSr +2 1.195\nBa +2 1.385\n\nReturn type\n\nBornIon\n\n\n\n\n\n","category":"function"},{"location":"lib/models/#NESSie.TestModel.XieModel","page":"Models","title":"NESSie.TestModel.XieModel","text":"mutable struct XieModel{T}\n    radius ::T                                 # radius of the origin-centered sphere\n    charges::Vector{Charge{T}}                 # point charges in the sphere\n    params ::Option{T}         = defaultopt(T) # system constants\nend\n\nSystem model of a dielectric sphere containing multiple point charges. On construction, the given point charge model will be translated and rescaled to fit inside an origin-centered sphere with the specified radius.\n\nSpecial contructors\n\nXieModel{T}(\n    radius ::T,\n    charges::Vector{Charge{T}},\n    params ::Option{T}          = defaultopt(T);\n    # kwargs\n    compat ::Bool               = false\n)\n\ncompat enables the compatibility mode and scales the model exactly like the reference implementation ([Xie16]). Use this flag if you intend to compare the results to the reference.\n\n\n\n\n\n","category":"type"},{"location":"lib/models/#NESSie.TestModel.NonlocalXieModel1","page":"Models","title":"NESSie.TestModel.NonlocalXieModel1","text":"struct NonlocalXieModel1{T}\n    radius ::T                 # radius of the origin-centered sphere\n    charges::Vector{Charge{T}} # point charges in the sphere\n    params ::Option{T}         # system constants\n    len    ::Int               # number of terms to be computed\n    A₁     ::Array{T, 2}       # coefficients A₁ for each charge\n    A₂     ::Array{T, 2}       # coefficients A₂ for each charge\n    A₃     ::Array{T, 2}       # coefficients A₃ for each charge\nend\n\nRepresentation of the first nonlocal Poisson dielectric model described in [Xie16]. This model comprises a full XieModel and the coefficients A_in with i = 1 2 3 (cf. Eqs. (20a-c)) for each point charge in the model, which are used in the computation of the electrostatic potentials.\n\nnote: Note\nThis type does not provide a trivial constructor.\n\nConstructor\n\nNonlocalXieModel1{T}(\n    model::XieModel{T},\n    len  ::Int\n)\n\nThe model is created solely from the given XieModel and the number of terms to be used to approximate the original infinite sum (Eq. 18). The coefficient vectors are computed automatically via coefficients.\n\n\n\n\n\n","category":"type"},{"location":"formats/input/#Input-formats","page":"Input formats","title":"Input formats","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    CurrentModule = NESSie.Format","category":"page"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"Currently supported input file formats with different models:","category":"page"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"File type Surface model Volume model Charges included\nHMO ✓  ✓\nMcsf  ✓ \nMSMS ✓  \nOFF ✓  \nPQR   ✓ (charges only)\nSTL ✓  ","category":"page"},{"location":"formats/input/#HMO","page":"Input formats","title":"HMO","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readhmo","category":"page"},{"location":"formats/input/#NESSie.Format.readhmo","page":"Input formats","title":"NESSie.Format.readhmo","text":"readhmo{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads a complete surface model from the given HMO file.\n\nReturn type\n\nModel{T, Triangle{T}}\n\nAlias\n\nreadhmo{T}(fname::String, ::Type{T}=Float64)\n\nReads the model using a file name rather than a IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/input/#Mcsf","page":"Input formats","title":"Mcsf","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readmcsf","category":"page"},{"location":"formats/input/#NESSie.Format.readmcsf","page":"Input formats","title":"NESSie.Format.readmcsf","text":"readmcsf{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64;\n    # kwargs\n    domain::Symbol=:none\n)\n\nReads a volume model from the given GAMer-generated mcsf file.\n\nnote: Note\nThis file type does not support charge models! Hence, the charge list of the returning Model object is empty and has to be set separately.\n\nArguments\n\ndomain Element domain (solute :Ω, solvent :Σ, or :none)\n\nReturn type\n\nModel{T, Tetrahedron{T}}\n\nAliases\n\nreadmcsf{T}(\n    fname ::String,\n          ::Type{T}=Float64;\n    # kwargs\n    domain::Symbol=:none\n)\n\nReads the model using a file name rather than a IOStream object.\n\nreadmcsf{T}(\n    fnameΩ::String,\n    fnameΣ::String,\n          ::Type{T}=Float64\n)\n\nReads the contents of two separate files (given by name), sets the element domains to :Ω or :Σ, respectively, and returns a single (merged) Model object.\n\n\n\n\n\n","category":"function"},{"location":"formats/input/#MSMS","page":"Input formats","title":"MSMS","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readmsms","category":"page"},{"location":"formats/input/#NESSie.Format.readmsms","page":"Input formats","title":"NESSie.Format.readmsms","text":"readmsms{T <: AbstractFloat}(\n    vertstream::IOStream,\n    facestream::IOStream,\n              ::Type{T}=Float64\n)\n\nReads a surface model from the given MSMS-generated .face and .vert files.\n\nnote: Note\nThis file type does not support charge models! Hence, the charge list of the returning Model object is empty and has to be set separately.\n\nReturn type\n\nModel{T, Triangle{T}}\n\nAlias\n\nreadmsms{T}(fname::String, ::Type{T}=Float64)\n\nReads the model using a common file name prefix (fname.{vert,face}) for both files rather than IOStream objects.\n\n\n\n\n\n","category":"function"},{"location":"formats/input/#OFF","page":"Input formats","title":"OFF","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readoff","category":"page"},{"location":"formats/input/#NESSie.Format.readoff","page":"Input formats","title":"NESSie.Format.readoff","text":"readoff{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads a surface model from the given OFF file.\n\nnote: Note\nThis file type does not support charge models! Hence, the charge list of the returning Model object is empty and has to be set separately.\n\nSpecification\n\nhttp://www.geomview.org/docs/html/OFF.html\n\nReturn type\n\nModel{T}\n\nAlias\n\nreadoff{T}(fname::String, ::Type{T}=Float64)\n\nReads the model using a file name rather than a IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/input/#PQR","page":"Input formats","title":"PQR","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readpqr","category":"page"},{"location":"formats/input/#NESSie.Format.readpqr","page":"Input formats","title":"NESSie.Format.readpqr","text":"readpqr{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads a charge model from the given PQR file.\n\nSpecification\n\nhttps://pdb2pqr.readthedocs.io/en/latest/formats/pqr.html\n\nReturn type\n\nVector{Charge{T}}\n\nAlias\n\nreadpqr{T}(fname::String, ::Type{T}=Float64)\n\nReads the charge model using a file name rather than a IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/input/#STL","page":"Input formats","title":"STL","text":"","category":"section"},{"location":"formats/input/","page":"Input formats","title":"Input formats","text":"    readstl","category":"page"},{"location":"formats/input/#NESSie.Format.readstl","page":"Input formats","title":"NESSie.Format.readstl","text":"readstl{T}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads a surface model from the given STL file.\n\nnote: Note\nThis file type does not support charge models! Hence, the charge list of the returning Model object is empty and has to be set separately.\n\nSpecification\n\nhttps://fabbers.com/tech/STL_Format\n\nReturn type\n\nModel{T, Triangle{T}}\n\nAlias\n\nreadstl{T}(\n    fname::String,\n         ::Type{T}=Float64\n)\n\nReads the model using a file name rather than an IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"intern/bem/#NESSie.BEM","page":"NESSie.BEM","title":"NESSie.BEM","text":"","category":"section"},{"location":"intern/bem/","page":"NESSie.BEM","title":"NESSie.BEM","text":"    CurrentModule = NESSie.BEM","category":"page"},{"location":"intern/bem/#Implicit-potential-matrices","page":"NESSie.BEM","title":"Implicit potential matrices","text":"","category":"section"},{"location":"intern/bem/","page":"NESSie.BEM","title":"NESSie.BEM","text":"    Kfun\n    Kyfun\n    Vfun\n    Vyfun","category":"page"},{"location":"intern/bem/#NESSie.BEM.Kfun","page":"NESSie.BEM","title":"NESSie.BEM.Kfun","text":"struct Kfun{T} <: InteractionFunction{Vector{T}, Triangle{T}, T} end\n\nInteraction function for an implicit representation of potential matrix K.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#NESSie.BEM.Kyfun","page":"NESSie.BEM","title":"NESSie.BEM.Kyfun","text":"struct Kyfun{T} <: InteractionFunction{Vector{T}, Triangle{T}, T}\n    yuk::T   # exponent of the Yukawa operator's fundamental solution\nend\n\nInteraction function for an implicit representation of potential matrix Kʸ.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#NESSie.BEM.Vfun","page":"NESSie.BEM","title":"NESSie.BEM.Vfun","text":"struct Vfun{T} <: InteractionFunction{Vector{T}, Triangle{T}, T} end\n\nInteraction function for an implicit representation of potential matrix V.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#NESSie.BEM.Vyfun","page":"NESSie.BEM","title":"NESSie.BEM.Vyfun","text":"struct Vyfun{T} <: InteractionFunction{Vector{T}, Triangle{T}, T}\n    yuk::T   # exponent of the Yukawa operator's fundamental solution\nend\n\nInteraction function for an implicit representation of potential matrix Vʸ.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#Implicit-system-matrices","page":"NESSie.BEM","title":"Implicit system matrices","text":"","category":"section"},{"location":"intern/bem/","page":"NESSie.BEM","title":"NESSie.BEM","text":"    LocalSystemMatrix\n    NonlocalSystemMatrix","category":"page"},{"location":"intern/bem/#NESSie.BEM.LocalSystemMatrix","page":"NESSie.BEM","title":"NESSie.BEM.LocalSystemMatrix","text":"struct LocalSystemMatrix{T} <: AbstractArray{T, 2}\n    K     ::InteractionMatrix{T, Vector{T}, Triangle{T}, Kfun{T}}   # Potential matrix `K`\n    params::Option{T}                                               # System constants\nend\n\nImplicit representation of the first local BEM system matrix.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#NESSie.BEM.NonlocalSystemMatrix","page":"NESSie.BEM","title":"NESSie.BEM.NonlocalSystemMatrix","text":"struct NonlocalSystemMatrix{T} <: AbstractArray{T, 2}\n    Ξ     ::Vector{Vector{T}}     # Observation points (row elements)\n    elems ::Vector{Triangle{T}}   # Surface elements (column elements)\n    params::Option{T}             # System constants\nend\n\nImplicit representation of the nonlocal BEM system matrix.\n\n\n\n\n\n","category":"type"},{"location":"intern/bem/#Iterative-solvers","page":"NESSie.BEM","title":"Iterative solvers","text":"","category":"section"},{"location":"intern/bem/","page":"NESSie.BEM","title":"NESSie.BEM","text":"    _solve_linear_system","category":"page"},{"location":"intern/bem/#NESSie.BEM._solve_linear_system","page":"NESSie.BEM","title":"NESSie.BEM._solve_linear_system","text":"_solve_linear_system{T}(\n    A::AbstractArray{T, 2},\n    b::AbstractArray{T, 1}\n)\n\nSolves the linear system Ax = b from A and b using a Jacobi-preconditioned GMRES solver.\n\nReturn type\n\nArray{T, 1}\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#Electrostatics","page":"Electrostatics","title":"Electrostatics","text":"","category":"section"},{"location":"lib/electrostatics/#Potential-types","page":"Electrostatics","title":"Potential types","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    PotentialType\n    SingleLayer\n    DoubleLayer","category":"page"},{"location":"lib/electrostatics/#NESSie.PotentialType","page":"Electrostatics","title":"NESSie.PotentialType","text":"abstract type PotentialType end\nstruct SingleLayer <: PotentialType end\nstruct DoubleLayer <: PotentialType end\n\nEnum-like representation of single and double layer potentials\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#NESSie.SingleLayer","page":"Electrostatics","title":"NESSie.SingleLayer","text":"abstract type PotentialType end\nstruct SingleLayer <: PotentialType end\nstruct DoubleLayer <: PotentialType end\n\nEnum-like representation of single and double layer potentials\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#NESSie.DoubleLayer","page":"Electrostatics","title":"NESSie.DoubleLayer","text":"abstract type PotentialType end\nstruct SingleLayer <: PotentialType end\nstruct DoubleLayer <: PotentialType end\n\nEnum-like representation of single and double layer potentials\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#Locality-assumption","page":"Electrostatics","title":"Locality assumption","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    LocalityType\n    LocalES\n    NonlocalES","category":"page"},{"location":"lib/electrostatics/#NESSie.LocalityType","page":"Electrostatics","title":"NESSie.LocalityType","text":"abstract type LocalityType end\nstruct NonlocalES <: LocalityType end\nstruct LocalES    <: LocalityType end\n\nEnum-like representation of locality assumption:\n\nLocal electrostatics: Complete independence of solvent molecules\nNonlocal electrostatics: Allow solvent molecule correlation effects (with area-of-effect radius λ)\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#NESSie.LocalES","page":"Electrostatics","title":"NESSie.LocalES","text":"abstract type LocalityType end\nstruct NonlocalES <: LocalityType end\nstruct LocalES    <: LocalityType end\n\nEnum-like representation of locality assumption:\n\nLocal electrostatics: Complete independence of solvent molecules\nNonlocal electrostatics: Allow solvent molecule correlation effects (with area-of-effect radius λ)\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#NESSie.NonlocalES","page":"Electrostatics","title":"NESSie.NonlocalES","text":"abstract type LocalityType end\nstruct NonlocalES <: LocalityType end\nstruct LocalES    <: LocalityType end\n\nEnum-like representation of locality assumption:\n\nLocal electrostatics: Complete independence of solvent molecules\nNonlocal electrostatics: Allow solvent molecule correlation effects (with area-of-effect radius λ)\n\n\n\n\n\n","category":"type"},{"location":"lib/electrostatics/#Potentials","page":"Electrostatics","title":"Potentials","text":"","category":"section"},{"location":"lib/electrostatics/#Molecular-potentials","page":"Electrostatics","title":"Molecular potentials","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    φmol\n    ∂ₙφmol\n    NESSie.∇φmol","category":"page"},{"location":"lib/electrostatics/#NESSie.φmol","page":"Electrostatics","title":"NESSie.φmol","text":"φmol{T}(\n    ξ        ::Vector{T},\n    charges  ::Vector{Charge{T}};\n    # kwargs\n    tolerance::T                 = T(1e-10)\n)\n\nComputes and returns the molecular potential of the given system of point charges in a structureless medium for the given observation point ξ:\n\nφ_mol(ξ) = frac14π ε_0 ε_Ω sum_i fracqᵢrᵢ-ξ\n\nIf rᵢ-ξ is smaller than the given tolerance, the value is replaced by tolerance for the affected charge.\n\nnote: Note\nThe return value is premultiplied by 4π  ε₀  ε_Ω\n\nReturn type\n\nT\n\nAliases\n\nφmol{T}(\n    Ξ        ::Vector{Vector{T}},\n    charges  ::Vector{Charge{T}};\n    # kwargs\n    tolerance::T                 = T(1e-10)\n)\n\nComputes the molecular potentials for a list of observation points.\n\nφmol{T}(\n    model    ::Model{T, Triangle{T}};\n    # kwargs\n    tolerance::T                     = T(1e-10)\n)\n\nComputes the molecular potentials for the given surface model, using each triangle center as observation point.\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#NESSie.∂ₙφmol","page":"Electrostatics","title":"NESSie.∂ₙφmol","text":"∂ₙφmol{T}(ξ::Triangle{T}, charges::Vector{Charge{T}})\n\nComputes and returns the normal derivative of the given system's molecular potential in a structureless medium, using the given triangle's center as observation point and the triangle's normal as reference normal.\n\nₙφ_mol(ξ) = -frac14π ε_0 ε_Ω sum_i fracqᵢrᵢ-ξ³ (rᵢ-ξ)  n\n\nnote: Note\nThe return value is premultiplied by 4π  ε₀  ε_Ω\n\nReturn type\n\nT\n\nAliases\n\n∂ₙφmol{T}(model::Model{T, Triangle{T}})\n\nComputes the normal derivatives of the molecular potentials for the given surface model, using each triangle center and normal as observation point.\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#NESSie.∇φmol","page":"Electrostatics","title":"NESSie.∇φmol","text":"∇φmol{T}(ξ::Vector{T}, charges::Vector{Charge{T}})\n\nComputes and returns the gradient of the given system's molecular potential in a structureless medium for the given observation point ξ.\n\nφ_mol(ξ) = -frac14π ε_0 ε_Ω sum_i fracqᵢrᵢ-ξ³ (rᵢ-ξ)\n\nnote: Note\nThe return value is premultiplied by 4π  ε₀  ε_Ω\n\nReturn type\n\nVector{T}\n\nAliases\n\n∇φmol{T}(Ξ::Vector{Vector{T}})\n\nComputes the molecular potential gradients for a list of observation points.\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#Interior-potentials","page":"Electrostatics","title":"Interior potentials","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    NESSie.BEM.φΩ\n    NESSie.TestModel.φΩ","category":"page"},{"location":"lib/electrostatics/#NESSie.BEM.φΩ","page":"Electrostatics","title":"NESSie.BEM.φΩ","text":"φΩ{T, R <: BEMResult{T}}(\n    Ξ         ::Vector{Vector{T}},\n    bem       ::R\n)\n\nComputes the local or nonlocal interior electrostatic potential φ_Ω for the given set of observation points Ξ.\n\nwarning: Warning\nThis function does not verify whether all points in Ξ are located in Ω!\n\nUnit\n\nV = fracCF\n\nReturn type\n\nVector{T}\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#NESSie.TestModel.φΩ","page":"Electrostatics","title":"NESSie.TestModel.φΩ","text":"φΩ{T, L <: LocalityType}(\n       ::Type{L},\n    ξ  ::Vector{T},\n    ion::BornIon{T},\n    opt::Option{T} = defaultopt(T)\n)\n\nComputes the interior local or nonlocal electrostatic potential φ_Ω for the given observation point ξ.\n\nUnit\n\nV = fracCF\n\nReturn type\n\nT\n\nwarning: Warning\nThis function does not verify whether ξ is located inside of the sphere!\n\n\n\n\n\nfunction φΩ{T}(\n    ξ    ::Vector{T},\n    model::NonlocalXieModel1{T}\n)\n\nComputes the interior nonlocal electrostatic potential φ_Ω for the given observation point ξ.\n\nUnit\n\nV = fracCF\n\nReturn type\n\nT\n\nwarning: Warning\nThis function does not verify whether ξ is located inside of the sphere!\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#Exterior-potentials","page":"Electrostatics","title":"Exterior potentials","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    NESSie.BEM.φΣ\n    NESSie.TestModel.φΣ","category":"page"},{"location":"lib/electrostatics/#NESSie.BEM.φΣ","page":"Electrostatics","title":"NESSie.BEM.φΣ","text":"φΣ{T, B <: BEMResult{T}}(\n    Ξ         ::Vector{Vector{T}},\n    bem       ::B\n)\n\nComputes the local or nonlocal exterior electrostatic potential φ_Σ for the given set of observation points Ξ.\n\nwarning: Warning\nThis function does not verify whether all points in Ξ are located in Σ!\n\nUnit\n\nV = fracCF\n\nReturn type\n\nVector{T}\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#NESSie.TestModel.φΣ","page":"Electrostatics","title":"NESSie.TestModel.φΣ","text":"φΣ{T, L <: LocalityType}(\n       ::Type{L},\n    ξ  ::Vector{T},\n    ion::BornIon{T},\n    opt::Option{T} = defaultopt(T)\n)\n\nComputes the exterior local or nonlocal electrostatic potential φ_Σ for the given observation point ξ.\n\nUnit\n\nV = fracCF\n\nReturn type\n\nT\n\nwarning: Warning\nThis function does not verify whether ξ is located outside of the sphere!\n\n\n\n\n\nfunction φΣ{T}(\n    ξ    ::Vector{T},\n    model::NonlocalXieModel1{T}\n)\n\nComputes the exterior nonlocal electrostatic potential φ_Σ for the given observation point ξ.\n\nUnit\n\nV = fracCF\n\nReturn type\n\nT\n\nwarning: Warning\nThis function does not verify whether ξ is located outside of the sphere!\n\n\n\n\n\n","category":"function"},{"location":"lib/electrostatics/#Energies","page":"Electrostatics","title":"Energies","text":"","category":"section"},{"location":"lib/electrostatics/","page":"Electrostatics","title":"Electrostatics","text":"    NESSie.BEM.rfenergy","category":"page"},{"location":"lib/electrostatics/#NESSie.BEM.rfenergy","page":"Electrostatics","title":"NESSie.BEM.rfenergy","text":"rfenergy{T, R <: BEMResult{T}}(\n    bem       ::R\n)\n\nComputes the local or nonlocal reaction field energy W* as\n\nW^* = φ^* ρ quad dΩ\n\nwhere φ^* is the reaction field and ρ is the corresponding charge distribution.\n\nUnit\n\nfrackJmol\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie","page":"NESSie","title":"NESSie","text":"","category":"section"},{"location":"intern/base/","page":"NESSie","title":"NESSie","text":"    CurrentModule = NESSie","category":"page"},{"location":"intern/base/#int-constants","page":"NESSie","title":"Constants","text":"","category":"section"},{"location":"intern/base/","page":"NESSie","title":"NESSie","text":"    _etol\n    σ\n    ec\n    potprefactor\n    yukawa","category":"page"},{"location":"intern/base/#NESSie._etol","page":"NESSie","title":"NESSie._etol","text":"_etol(::Float64)\n_etol(::Type{Float64})\n_etol(::Float32)\n_etol(::Type{Float32})\n\nCommon tolerance values internally used by NESSie.\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.σ","page":"NESSie","title":"NESSie.σ","text":"Geometric quantity σ(ξ)\n\nσ(ξ) = lim_ε0 frac14πε² _r  Ωr-ξ=ε dΓᵣ = frac12\n\nfor almost all ξ  Γ (cf. [Ste03]).\n\n\n\n\n\n","category":"constant"},{"location":"intern/base/#NESSie.ec","page":"NESSie","title":"NESSie.ec","text":"10^10 times the elementary charge (for Å  m conversion)\n\nUnit\n\nC\n\n\n\n\n\n","category":"constant"},{"location":"intern/base/#NESSie.potprefactor","page":"NESSie","title":"NESSie.potprefactor","text":"potprefactor(T::Type{Float64} = Float64)\npotprefactor(T::Type{Float32})\n\nCommon prefactor for all potentials φ_Ω and φ_Σ:\n\nfrac1602  10^-1910^-10  4π   ε₀  1145  4π\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.yukawa","page":"NESSie","title":"NESSie.yukawa","text":"yukawa{T}(opt::Option{T})\n\nExponent 1Λ for the fundamental solution of the yukawa operator\n\nΛ = λsqrtfracε_ε_Σ\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#int-util-base","page":"NESSie","title":"Utility functions","text":"","category":"section"},{"location":"intern/base/","page":"NESSie","title":"NESSie","text":"    cathetus\n    cos\n    ddot\n    distance\n    eye!\n    isdegenerate\n    pluseye!\n    props\n    reverseindex\n    seek\n    sign\n    unpack\n    vertexnormals","category":"page"},{"location":"intern/base/#NESSie.cathetus","page":"NESSie","title":"NESSie.cathetus","text":"cathetus{T}(hyp::T, cosθ::T)\n\nComputes the cathetus c₁ of a triangle given the hypotenuse h and the cosine of the exterior angle θ between the hypotenuse and the other cathetus c₂.\n\nc₂ = h  cos(θ) \nh² = c₁² + c₂² \n c₁ = sqrth²  (1 - cos²(θ))\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#Base.cos","page":"NESSie","title":"Base.cos","text":"cos{T}(\n    u    ::Vector{T},\n    v    ::Vector{T},\n    unorm::T=norm(u),\n    vnorm::T=norm(v)\n)\n\nComputes the cosine of the angle between the given vectors u and v with lengths unorm and vnorm, respectively.\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.ddot","page":"NESSie","title":"NESSie.ddot","text":"ddot{T}(\n    u::Vector{T},\n    v::Vector{T},\n    n::Vector{T}\n)\n\nDevectorized computation of (u-v)⋅n.\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.distance","page":"NESSie","title":"NESSie.distance","text":"distance{T}(\n    q   ::Vector{T},\n    elem::Triangle{T}\n)\n\nCalculates the (positive or negative) distance from the given point q to the plane the given triangle elem is located in. Negative distances correspond to point locations on the 'inside' wrt. to the element's (outward-facing) normal vector.\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.eye!","page":"NESSie","title":"NESSie.eye!","text":"eye!{T}(\n    m::Union{DenseArray{T,2}, SubArray{T,2}},\n    α::Number=one(T)\n)\n\nInitializes the given matrix m with αI, with I being an identity matrix with the same dimensions as m.\n\nReturn type\n\nVoid\n\nExample\n\njulia> m = 2 * ones(2, 2)\n2×2 Matrix{Float64}:\n 2.0  2.0\n 2.0  2.0\n\njulia> eye!(m); m\n2×2 Matrix{Float64}:\n 1.0  0.0\n 0.0  1.0\n\njulia> eye!(m, 2); m\n2×2 Matrix{Float64}:\n 2.0  0.0\n 0.0  2.0\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.isdegenerate","page":"NESSie","title":"NESSie.isdegenerate","text":"isdegenerate{T}(elem::Triangle{T})\n\nTests whether the given triangle is degenerate.\n\nReturn type\n\nBool\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.pluseye!","page":"NESSie","title":"NESSie.pluseye!","text":"pluseye!{T}(\n    m::Union{DenseArray{T,2}, SubArray{T,2}},\n    α::Number=one(T)\n)\n\nAdds α to all diagonal elements of matrix m.\n\nReturn type\n\nVoid\n\nExample\n\njulia> m = 2 * ones(2, 2)\n2×2 Matrix{Float64}:\n 2.0  2.0\n 2.0  2.0\n\njulia> pluseye!(m); m\n2×2 Matrix{Float64}:\n 3.0  2.0\n 2.0  3.0\n\njulia> pluseye!(m, 2); m\n2×2 Matrix{Float64}:\n 5.0  2.0\n 2.0  5.0\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.props","page":"NESSie","title":"NESSie.props","text":"props{T}(\n    elem::Triangle{T}\n)\n\nComputes the given triangle's properties, that is, centroid, normal, distance to origin, and area. Returns the completely initialized Triangle as a copy.\n\nwarning: Warning\nThe given triangle remains unchanged!\n\nReturn type\n\nTriangle\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.reverseindex","page":"NESSie","title":"NESSie.reverseindex","text":"reverseindex{T}(v::Vector{T})\n\nCreates a reverse index for the given vector v, that is, a dictionary linking the object IDs of the vector elements to the corresponding position in the vector.\n\nReturn type\n\nDict{UInt, UInt}\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#Base.seek","page":"NESSie","title":"Base.seek","text":"seek(\n    fh         ::IOStream,\n    prefix     ::String,\n    skiptheline::Bool = true\n)\n\nFast-forwards an IOStream to the next line starting with the given prefix. In case there is no such line, the stream handle will be set to EOF.\n\nArguments\n\nskiptheline    If true, said line will also be skipped\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#Base.sign","page":"NESSie","title":"Base.sign","text":"sign{T}(\n    u::Vector{T},\n    v::Vector{T},\n    n::Vector{T}\n)\n\nDetermines whether the normal vector of the plane specified by the vectors u and v has the same orientation as the given normal vector n. Returns 1 if both normals have the same orientation, 0 if at least one of the vectors is zero, and -1 otherwise.\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.unpack","page":"NESSie","title":"NESSie.unpack","text":"unpack{T}(data::Vector{Vector{T}})\n\nUnpacks the given vector of vectors into a single vector.\n\nReturn type\n\nVector{T}\n\nExample\n\njulia> unpack([[1, 2], [3]])\n3-element Vector{Int64}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"function"},{"location":"intern/base/#NESSie.vertexnormals","page":"NESSie","title":"NESSie.vertexnormals","text":"vertexnormals{T}(model::Model{T, Triangle{T}})\n\nReturns a vector containing the normal vectors of the given model's triangles.\n\nReturn type\n\nVector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/rjasanow/#NESSie.Rjasanow","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow","text":"","category":"section"},{"location":"intern/rjasanow/","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow","text":"    CurrentModule = NESSie.Rjasanow","category":"page"},{"location":"intern/rjasanow/","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow","text":"    ObservationPosition\n    InPlane\n    InSpace\n    laplacepot\n    logterm\n    projectξ","category":"page"},{"location":"intern/rjasanow/#NESSie.Rjasanow.ObservationPosition","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.ObservationPosition","text":"abstract type ObservationPosition end\nstruct InPlane <: ObservationPosition end\nstryct InSpace <: ObservationPosition end\n\nEnum-like representation of the obseration point's position relative to the corresponding surface element\n\n\n\n\n\n","category":"type"},{"location":"intern/rjasanow/#NESSie.Rjasanow.InPlane","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.InPlane","text":"abstract type ObservationPosition end\nstruct InPlane <: ObservationPosition end\nstryct InSpace <: ObservationPosition end\n\nEnum-like representation of the obseration point's position relative to the corresponding surface element\n\n\n\n\n\n","category":"type"},{"location":"intern/rjasanow/#NESSie.Rjasanow.InSpace","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.InSpace","text":"abstract type ObservationPosition end\nstruct InPlane <: ObservationPosition end\nstryct InSpace <: ObservationPosition end\n\nEnum-like representation of the obseration point's position relative to the corresponding surface element\n\n\n\n\n\n","category":"type"},{"location":"intern/rjasanow/#NESSie.Rjasanow.laplacepot","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.laplacepot","text":"function laplacepot{T, P <: PotentialType}(\n    ptype::Type{P},\n    ξ    ::Vector{T},\n    elem ::Triangle{T},\n    dist ::T\n)\n\nComputes the single or double layer Laplace potential of the given triangle for the given observation point ξ. The latter needs to be projected onto the surface element plane [Rja90].\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\ndist Distance from the original ξ to the surface element plane\n\nReturn type\n\nT\n\n\n\n\n\nlaplacepot{T, P <: PotentialType}(\n    ptype::Type{P},\n    ξ::Vector{T},\n    x1::Vector{T},\n    x2::Vector{T},\n    normal::Vector{T},\n    dist::T\n)\n\nComputes the single or double layer Laplace potential of the triangle defined by the observation point ξ and two nodes x1 and x2 of the surface element. x2 is required to be x1's next neighbor in counterclockwise direction. Also, ξ needs to be projected onto the surface element plane  [Rja90].\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nnormal Unit normal vector of the surface element\ndist Distance from the original ξ to the surface element plane\n\nReturn type\n\nT\n\n\n\n\n\nlaplacepot{T, P <: PotentialType, O <: ObservationPosition}(\n         ::Type{P},\n         ::Type{O},\n    sinφ1::T,\n    sinφ2::T,\n    h    ::T,\n    d    ::T\n)\n\nComputes the Laplace potential (or its normal derivative) of the triangle with the given height h at the observation point ξ (projected onto the surface element plane) and the sines of the angles φ₁ and φ₂ between h and the triangle sides extending from ξ [Rja90].\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nd Distance from the original ξ to the surface element plane\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/rjasanow/#NESSie.Rjasanow.logterm","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.logterm","text":"logterm{T}(χ2::T, sinφ::T)\n\nUtility function to compute\n\nfrac\nsqrt1 - χ² sin²(φ) + sqrt1 - χ² sin(φ)\nsqrt1 - χ² sin²(φ) - sqrt1 - χ² sin(φ)\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/rjasanow/#NESSie.Rjasanow.projectξ","page":"NESSie.Rjasanow","title":"NESSie.Rjasanow.projectξ","text":"projectξ{T}(ξ::Vector{T}, elem::Triangle{T})\n\nProjects ξ onto the surface element plane. Returns the projection and the original distance to the plane.\n\nReturn type\n\nTuple{Vector{T}, T}\n\n\n\n\n\n","category":"function"},{"location":"intern/radon/#NESSie.Radon","page":"NESSie.Radon","title":"NESSie.Radon","text":"","category":"section"},{"location":"intern/radon/","page":"NESSie.Radon","title":"NESSie.Radon","text":"    CurrentModule = NESSie.Radon","category":"page"},{"location":"intern/radon/","page":"NESSie.Radon","title":"NESSie.Radon","text":"    radoncoll\n    radoncoll!\n    regularyukawapot\n    ∂ₙregularyukawapot\n    setcubpts!","category":"page"},{"location":"intern/radon/#NESSie.Radon.radoncoll","page":"NESSie.Radon","title":"NESSie.Radon.radoncoll","text":"radoncoll{T}(\n        ξ       ::Vector{T},\n        elem    ::Triangle{T},\n        yukawa  ::T,\n        solution::Function\n)\n\nSeven-point Radon cubature [Rad48] for a given function and a pair of surface element and observations point.\n\nIf you intend computing single/double layer potentials with this function, you might want to use the shorthand signature regularyukawacoll instead.\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nsolution Fundamental solution; supported functions: regularyukawapot, ∂ₙregularyukawapot\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"intern/radon/#NESSie.Radon.radoncoll!","page":"NESSie.Radon","title":"NESSie.Radon.radoncoll!","text":"radoncoll!{T}(\n        dest    ::DenseArray{T,1},\n        elements::Vector{Triangle{T}},\n        Ξ       ::Vector{Vector{T}},\n        solution::Function,\n        yukawa  ::T,\n        fvals   ::DenseArray{T,1}\n)\n\nradoncoll!{T}(\n        dest    ::DenseArray{T,2},\n        elements::Vector{Triangle{T}},\n        Ξ       ::Vector{Vector{T}},\n        solution::Function,\n        yukawa  ::T\n)\n\nSeven-point Radon cubature [Rad48] for a given function and a list of triangles and observation points Ξ. If dest is a vector, the function values f for each surface triangle have to be specified, since each element of the vector represents the dot product of the corresponding coefficient matrix row and the fvals vector.\n\nIf you intend computing single/double layer potentials with this function, you might want to use the shorthand signature regularyukawacoll! instead.\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nsolution Fundamental solution; supported functions: regularyukawapot, ∂ₙregularyukawapot\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"intern/radon/#NESSie.Radon.regularyukawapot","page":"NESSie.Radon","title":"NESSie.Radon.regularyukawapot","text":"regularyukawapot{T}(\n    x     ::DenseArray{T,1},\n    ξ     ::Vector{T},\n    yukawa::T,\n          ::Vector{T}=T[]\n)\n\nComputes the regular part of the Yukawa potential, that is, Yukawa minus Laplace:\n\nmathcalG^Y-mathcalG^L = frac14πfrace^-fracx - ξΛ - 1x-ξ\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/radon/#NESSie.Radon.∂ₙregularyukawapot","page":"NESSie.Radon","title":"NESSie.Radon.∂ₙregularyukawapot","text":"∂ₙregularyukawapot{T}(\n    x     ::Vector{T},\n    ξ     ::Vector{T},\n    yukawa::T,\n    normal::Vector{T}\n)\n\nComputes the normal derivative of the regular part of the Yukawa potential, that is, Yukawa minus Laplace:\n\nfracn frac14π frace^-fracx - ξΛ - 1x-ξ\n= frac14π frac1 - (1 + Λ^-1 x - ξ)e^-fracx - ξΛx-ξ²\nfrac(x - ξ)  nx - ξ\n\nnote: Note\nThe result is premultiplied by 4π.\n\nArguments\n\nyukawa Exponent of the Yukawa operator's fundamental solution\n\nReturn type\n\nT\n\n\n\n\n\n","category":"function"},{"location":"intern/radon/#NESSie.Radon.setcubpts!","page":"NESSie.Radon","title":"NESSie.Radon.setcubpts!","text":"setcubpts!{T}(\n    dest::Vector{Vector{T}},\n    qpts::QuadPts2D{T},\n    elem::Triangle{T}\n)\n\nPrepare cubature points for one surface element.\n\nReturn type\n\nVoid\n\n\n\n\n\n","category":"function"},{"location":"lib/solvers/#Solvers","page":"Solvers","title":"Solvers","text":"","category":"section"},{"location":"lib/solvers/#BEM-solvers","page":"Solvers","title":"BEM solvers","text":"","category":"section"},{"location":"lib/solvers/","page":"Solvers","title":"Solvers","text":"    CurrentModule = NESSie.BEM","category":"page"},{"location":"lib/solvers/","page":"Solvers","title":"Solvers","text":"    BEMResult\n    LocalBEMResult\n    NonlocalBEMResult\n    solve\n    solve_implicit","category":"page"},{"location":"lib/solvers/#NESSie.BEM.BEMResult","page":"Solvers","title":"NESSie.BEM.BEMResult","text":"abstract type BEMResult{T, E <: SurfaceElement{T}} end\n\nAbstract base type for all BEM solver results\n\n\n\n\n\n","category":"type"},{"location":"lib/solvers/#NESSie.BEM.LocalBEMResult","page":"Solvers","title":"NESSie.BEM.LocalBEMResult","text":"struct LocalBEMResult{T, E} <: BEMResult{T, E}\n    model::Model{T, E}\n    u    ::Vector{T}   # [γ₀int(φ*)](ξ)    ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    q    ::Vector{T}   # [γ₁int(φ*)](ξ)    ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    umol ::Vector{T}   # [γ₀int(φ*mol)](ξ) ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    qmol ::Vector{T}   # [γ₁int(φ*mol)](ξ) ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\nend\n\nResult data of the local solving process to be used for potential computation and post-processing, with Ξ being the list of observation points, that is, the set of triangle centroids.\n\n\n\n\n\n","category":"type"},{"location":"lib/solvers/#NESSie.BEM.NonlocalBEMResult","page":"Solvers","title":"NESSie.BEM.NonlocalBEMResult","text":"struct NonlocalBEMResult{T, E} <: BEMResult{T, E}\n    model::Model{T, E}\n    u    ::SubArray{T,1}   # [γ₀int(φ*)](ξ)    ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    q    ::SubArray{T,1}   # [γ₁int(φ*)](ξ)    ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    w    ::SubArray{T,1}   # [γ₀ext(Ψ)](ξ)     ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    umol ::Vector{T}       # [γ₀int(φ*mol)](ξ) ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\n    qmol ::Vector{T}       # [γ₁int(φ*mol)](ξ) ∀ ξ ∈ Ξ; premultiplied by 4π⋅ε0\nend\n\nResult data of the nonlocal solving process to be used for potential computation and post-processing, with Ξ being the list of observation points, that is, the set of triangle centroids.\n\n\n\n\n\n","category":"type"},{"location":"lib/solvers/#NESSie.BEM.solve","page":"Solvers","title":"NESSie.BEM.solve","text":"solve{T, L <: LocalityType}(\n         ::L,\n    model::Model{T, Triangle{T}}\n)\n\nComputes the full local or nonlocal cauchy data on the surface of the biomolecule using an explicit representation of the BEM system.\n\nnote: Note\nThe explicit system representations require a substantial amount of memory and might easily exceed the available resources on your machine (the memory demands scale quadratically with the number of surface elements). If you encounter this problem, please consider switching to solve_implicit or our CUDA-accelerated solvers from the CuNESSie.jl package instead, which provide the same function interface and are freely interchangeable.\n\nReturn type\n\nLocalBEMResult{T, Triangle{T}} or NonlocalBEMResult{T, Triangle{T}}\n\n\n\n\n\n","category":"function"},{"location":"lib/solvers/#NESSie.BEM.solve_implicit","page":"Solvers","title":"NESSie.BEM.solve_implicit","text":"solve_implicit{T, L <: LocalityType}(\n         ::L,\n    model::Model{T, Triangle{T}}\n)\n\nComputes the full local or nonlocal cauchy data on the surface of the biomolecule using an implicit representation of the BEM system.\n\nnote: Note\nThe implicit system representations provide a small memory footprint even for large biomolecular systems (the memory demands scale only linearly with the number of surface elements). However, this comes at the cost of additional computation time, which might exceed several hours, depending on the system size. If you encounter this problem, please consider switching to solve or our CUDA-accelerated solvers from the CuNESSie.jl package instead, which provide the same function interface and are freely interchangeable.\n\nReturn type\n\nLocalBEMResult{T, Triangle{T}} or NonlocalBEMResult{T, Triangle{T}}\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#Output-formats","page":"Output formats","title":"Output formats","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    CurrentModule = NESSie.Format","category":"page"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"Currently supported output file formats with different models:","category":"page"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"File type Point cloud Surface model Volume model Charges included\nHMO  ✓  ✓\nSKEL  ✓ ✓ \nSTL  ✓  \nVTK  ✓ ✓ \nXML3D/JSON ✓ ✓  \nXML3D/XML ✓   ","category":"page"},{"location":"formats/output/#hmoout","page":"Output formats","title":"HMO","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    writehmo","category":"page"},{"location":"formats/output/#NESSie.Format.writehmo","page":"Output formats","title":"NESSie.Format.writehmo","text":"writehmo{T}(\n    stream::IOStream,\n    model ::Model{T, Triangle{T}}\n)\n\nCreates a HMO file from the given surface model.\n\nReturn type\n\nVoid\n\nAlias\n\nwritehmo{T}(\n    fname::String,\n    model::Model{T, Triangle{T}}\n)\n\nCreates the HMO file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#SKEL","page":"Output formats","title":"SKEL","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    writeskel","category":"page"},{"location":"formats/output/#NESSie.Format.writeskel","page":"Output formats","title":"NESSie.Format.writeskel","text":"writeskel{T, M <: Model{T}}(\n    stream::IOStream,\n    model ::M\n)\n\nCreates a SKEL file from a given surface or volume model, representing the model as a collection of points and polylines.\n\nSpecification\n\nhttp://www.geomview.org/docs/html/SKEL.html\n\nReturn type\n\nVoid\n\nAlias\n\nwriteskel{T, M <: Model{T}}(\n    fname::String,\n    model::M\n)\n\nCreates the SKEL file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#stlout","page":"Output formats","title":"STL","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    writestl","category":"page"},{"location":"formats/output/#NESSie.Format.writestl","page":"Output formats","title":"NESSie.Format.writestl","text":"writestl{T}(\n    stream::IOStream,\n    model ::Model{T, Triangle{T}}\n)\n\nCreates a binary STL file from a given surface model.\n\nSpecification\n\nhttp://www.fabbers.com/tech/STL_Format\n\nReturn type\n\nVoid\n\nAlias\n\nwritestl{T}(\n    fname::String,\n    model::Model{T, Triangle{T}}\n)\n\nCreates the STL file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#VTK","page":"Output formats","title":"VTK","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    writevtk","category":"page"},{"location":"formats/output/#NESSie.Format.writevtk","page":"Output formats","title":"NESSie.Format.writevtk","text":"writevtk{T, M <: Model{T}}(\n    stream::IOStream,\n    model ::M\n)\n\nCreates a VTK-compatible output file from a given surface or volume model. The exact file type is determined by the given model:\n\nModel type Resulting file type\nSurface model VTK PolyData\nVolume model VTK UnstructuredGrid\n\nSpecification\n\nhttps://vtk.org/VTK/img/file-formats.pdf\n\nReturn type\n\nVoid\n\nAlias\n\nwritevtk{T, M <: Model{T}}(\n    fname::String,\n    model::M\n)\n\nCreates the VTK file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#XML3D","page":"Output formats","title":"XML3D","text":"","category":"section"},{"location":"formats/output/","page":"Output formats","title":"Output formats","text":"    writexml3d_json\n    writexml3d_xml","category":"page"},{"location":"formats/output/#NESSie.Format.writexml3d_json","page":"Output formats","title":"NESSie.Format.writexml3d_json","text":"writexml3d_json{T}(\n    stream::IOStream,\n    model ::Union{Vector{Vector{T}}, Model{T, Triangle{T}}}\n)\n\nCreates a XML3D-specific JSON file either from a given collection of nodes (representing the latter as point cloud) or from a given surface model.\n\nSpecification\n\nhttps://github.com/xml3d/xml3d.js/wiki/External-resources\n\nReturn type\n\nVoid\n\nAlias\n\nwritexml3d_json{T}(\n    fname::String,\n    nodes::Union{Vector{Vector{T}}), Model{T, Triangle{T}}}\n)\n\nCreates the JSON file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"formats/output/#NESSie.Format.writexml3d_xml","page":"Output formats","title":"NESSie.Format.writexml3d_xml","text":"writexml3d_xml{T}(\n    stream::IOStream,\n    nodes ::Vector{Vector{T}}\n)\n\nCreates a XML3D-specific XML file from a given collection of nodes, representing the latter as point cloud.\n\nSpecification\n\nhttps://github.com/xml3d/xml3d.js/wiki/External-resources\n\nReturn type\n\nVoid\n\nAlias\n\nwritexml3d_xml{T}(\n    fname::String,\n    nodes::Vector{Vector{T}}\n)\n\nCreates the XML file by name rather than IOStream object.\n\n\n\n\n\n","category":"function"},{"location":"#NESSie.jl","page":"Home","title":"NESSie.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Nonlocal Electrostatics in Structured Solvents","category":"page"},{"location":"#Motivation","page":"Home","title":"Motivation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Electrostatic interactions are a major contributor to protein-protein and protein-ligand interactions. In contrast to other molecular interaction components, they can be significant over medium to long distances and are thus crucial for molecular visibility. One major challenge in this context is the treatment of the solvent the molecules are immersed in, e.g., water in a biological context. Strong simplifications of the structure of such polarizable and highly structured solvents are commonplace to achieve the required computational efficiency, but invariably lead to inaccuracies.","category":"page"},{"location":"#Usage-example","page":"Home","title":"Usage example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The following Julia code shows how to compute and print the nonlocal reaction field energy of a single Na+ ion (modeled as a spherically-symmetric, vacuum-filled system) in water:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using NESSie\nusing NESSie.BEM\nusing NESSie.Format: readoff, readpqr\n\n# I. Create model\nmodel           = readoff(\"data/born/na.off\")\nmodel.charges   = readpqr(\"data/born/na.pqr\")\nmodel.params.εΩ = 1   # dielectric constant for vacuum model\nmodel.params.εΣ = 78  # dielectric constant for water\n\n# II. Apply nonlocal solver\nbem = solve(NonlocalES, model)\n\n# III. Apply postprocessor\nval = rfenergy(bem)\nprintln(\"Reaction field energy: $val kJ/mol\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"More examples are available in the doc/examples/ directory.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use NESSie.jl in your research, please cite the following publication:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Kemmer, T, Rjasanow, S., Hildebrandt, A (2018). NESSie. jl - Efficient and Intuitive Finite Element and Boundary Element Methods for Nonlocal Protein Electrostatics in the Julia Language. Journal of Computational Science 28, 193-203.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you use our implicit representations and solvers (solve_implicit), please also cite:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Kemmer, T (2021). Space-efficient and exact system representations for the nonlocal protein electrostatics problem. Ph. D. thesis, Johannes Gutenberg University Mainz. Mainz, Germany.","category":"page"},{"location":"","page":"Home","title":"Home","text":"With BibTeX, you can use the following entries:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@article{nessie-2018,\n    author = {Kemmer, Thomas and Rjasanow, Sergej and Hildebrandt, Andreas},\n    title = {{NESSie.jl -- Efficient and Intuitive Finite Element and Boundary Element Methods for Nonlocal Protein Electrostatics in the Julia Language}},\n    year = {2018},\n    journal = {Journal of Computational Science},\n    volume = {28},\n    pages = {193-203},\n    doi = {10.1016/j.jocs.2018.08.008}\n}\n@phdthesis{cunessie-2021,\n\tauthor = {Kemmer, Thomas},\n\ttitle = {{Space-efficient and exact system representations for the nonlocal protein electrostatics problem}},\n\tyear = {2021},\n\tschool = {Johannes Gutenberg University Mainz},\n\taddress = {Mainz, Germany},\n\tdoi = {10.25358/openscience-5689}\n}","category":"page"},{"location":"#Bibliography","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[Åqv90] J. Åqvist, Ion-water interaction potentials derived from free energy pertubation simulations. J. Phys. Chem. 94: 8021, 1990.\n[Kea86] P. Keast, Moderate degree tetrahedral quadrature formulas. CMAME 55: 339-348, 1986.\n[Rad48] J. Radon, Zur mechanischen Kubatur (in German). Monatsh. für Math. 52(4): 286-300, 1948.\n[Rja90] S. Rjasanow, Vorkonditionierte iterative Auflösung von Randelementgleichungen für die Dirichlet-Aufgabe (in German). Wissenschaftliche Schriftreihe der Technischen Universität Karl-Marx-Stadt, 7/1990.\n[Ste03] O. Steinbach, Numerische Näherungsverfahren für elliptische Randwertprobleme - Finite Elemente und Randelemente (in German). Advances in Numerical Matheamtics. Teubner Verlag/GWV Fachverlage GmbH, Wiesbaden, 2003.\n[Xie16] D. Xie, H. W. Volkmer, and J. Ying, Analytical solutions of nonlocal Poisson dielectric models with multiple point charges inside a dielectric sphere. Physical Review E 93(4): 043304, 2016.","category":"page"},{"location":"intern/format/#NESSie.Format","page":"NESSie.Format","title":"NESSie.Format","text":"","category":"section"},{"location":"intern/format/","page":"NESSie.Format","title":"NESSie.Format","text":"    CurrentModule = NESSie.Format","category":"page"},{"location":"intern/format/#int-input","page":"NESSie.Format","title":"Input formats","text":"","category":"section"},{"location":"intern/format/","page":"NESSie.Format","title":"NESSie.Format","text":"    readhmo_nodes\n    readhmo_elements\n    readhmo_charges\n    readmcsf_nodes\n    readmcsf_elements\n    readmsms_nodes\n    readmsms_elements\n    readoff_nodes\n    readoff_elements","category":"page"},{"location":"intern/format/#NESSie.Format.readhmo_nodes","page":"NESSie.Format","title":"NESSie.Format.readhmo_nodes","text":"readhmo_nodes{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads all nodes from the given HMO file.\n\nReturn type\n\nVector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readhmo_elements","page":"NESSie.Format","title":"NESSie.Format.readhmo_elements","text":"readhmo_elements{T <: AbstractFloat}(\n    stream::IOStream,\n    nodes ::Vector{Vector{T}}\n)\n\nReads all elements from the given HMO file.\n\nReturn type\n\nVector{Triangle{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readhmo_charges","page":"NESSie.Format","title":"NESSie.Format.readhmo_charges","text":"readhmo_charges{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads all charges from the given HMO file.\n\nReturn type\n\nVector{Charge{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readmcsf_nodes","page":"NESSie.Format","title":"NESSie.Format.readmcsf_nodes","text":"readmcsf_nodes{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads all nodes from the given GAMer-generated mcsf file.\n\nReturn type\n\nVector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readmcsf_elements","page":"NESSie.Format","title":"NESSie.Format.readmcsf_elements","text":"readmcsf_elements{T <: AbstractFloat}(\n    stream::IOStream,\n    nodes ::Vector{Vector{T}};\n    # kwargs\n    domain::Symbol=:none\n)\n\nReads all elements from the given GAMer-generated mcsf file.\n\nReturn type\n\nVector{Tetrahedron{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readmsms_nodes","page":"NESSie.Format","title":"NESSie.Format.readmsms_nodes","text":"readmsms_nodes{T <: AbstractFloat}(\n    stream::IOStream,\n          ::Type{T}=Float64\n)\n\nReads all nodes from the given MSMS-generated .vert file.\n\nReturn type\n\nVector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readmsms_elements","page":"NESSie.Format","title":"NESSie.Format.readmsms_elements","text":"readmsms_elements{T <: AbstractFloat}(\n    stream::IOStream,\n    nodes ::Vector{Vector{T}}\n)\n\nReads all elements from the given MSMS-generated .face file.\n\nReturn type\n\nVector{Triangle{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readoff_nodes","page":"NESSie.Format","title":"NESSie.Format.readoff_nodes","text":"readoff_nodes{T <: AbstractFloat}(\n    stream::IOStream,\n    n     ::Int,\n          ::Type{T}=Float64\n)\n\nReads the first n nodes from the given OFF file.\n\nReturn type\n\nVector{Vector{T}}\n\n\n\n\n\n","category":"function"},{"location":"intern/format/#NESSie.Format.readoff_elements","page":"NESSie.Format","title":"NESSie.Format.readoff_elements","text":"readoff_elements{T <: AbstractFloat}(\n    stream::IOStream,\n    n     ::Int,\n    nodes ::Vector{Vector{T}},\n          ::Type{T}=Float64\n)\n\nReads the first n elements from the given OFF file.\n\nReturn type\n\nVector{Triangle{T}}\n\n\n\n\n\n","category":"function"}]
}
